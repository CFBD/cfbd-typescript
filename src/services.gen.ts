// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { GetTeamsData, GetTeamsError, GetTeamsResponse, GetFbsTeamsData, GetFbsTeamsError, GetFbsTeamsResponse, GetMatchupData, GetMatchupError, GetMatchupResponse, GetRosterData, GetRosterError, GetRosterResponse, GetConferencesError, GetConferencesResponse, GetTalentData, GetTalentError, GetTalentResponse, GetVenuesError, GetVenuesResponse, GetPlayerSeasonStatsData, GetPlayerSeasonStatsError, GetPlayerSeasonStatsResponse, GetTeamStatsData, GetTeamStatsError, GetTeamStatsResponse, GetCategoriesError, GetCategoriesResponse, GetAdvancedSeasonStatsData, GetAdvancedSeasonStatsError, GetAdvancedSeasonStatsResponse, GetAdvancedGameStatsData, GetAdvancedGameStatsError, GetAdvancedGameStatsResponse, GetAdjustedTeamSeasonStatsData, GetAdjustedTeamSeasonStatsError, GetAdjustedTeamSeasonStatsResponse, GetRecruitsData, GetRecruitsError, GetRecruitsResponse, GetTeamRecruitingRankingsData, GetTeamRecruitingRankingsError, GetTeamRecruitingRankingsResponse, GetAggregatedTeamRecruitingRatingsData, GetAggregatedTeamRecruitingRatingsError, GetAggregatedTeamRecruitingRatingsResponse, GetSpData, GetSpError, GetSpResponse, GetConferenceSpData, GetConferenceSpError, GetConferenceSpResponse, GetSrsData, GetSrsError, GetSrsResponse, GetEloData, GetEloError, GetEloResponse, GetFpiData, GetFpiError, GetFpiResponse, GetRankingsData, GetRankingsError, GetRankingsResponse, GetPlaysData, GetPlaysError, GetPlaysResponse, GetPlayTypesError, GetPlayTypesResponse, GetPlayStatsData, GetPlayStatsError, GetPlayStatsResponse, GetPlayStatTypesError, GetPlayStatTypesResponse, SearchPlayersData, SearchPlayersError, SearchPlayersResponse, GetPlayerUsageData, GetPlayerUsageError, GetPlayerUsageResponse, GetReturningProductionData, GetReturningProductionError, GetReturningProductionResponse, GetTransferPortalData, GetTransferPortalError, GetTransferPortalResponse, GetPredictedPointsData, GetPredictedPointsError, GetPredictedPointsResponse, GetPredictedPointsAddedByTeamData, GetPredictedPointsAddedByTeamError, GetPredictedPointsAddedByTeamResponse, GetPredictedPointsAddedByGameData, GetPredictedPointsAddedByGameError, GetPredictedPointsAddedByGameResponse, GetPredictedPointsAddedByPlayerGameData, GetPredictedPointsAddedByPlayerGameError, GetPredictedPointsAddedByPlayerGameResponse, GetPredictedPointsAddedByPlayerSeasonData, GetPredictedPointsAddedByPlayerSeasonError, GetPredictedPointsAddedByPlayerSeasonResponse, GetWinProbabilityData, GetWinProbabilityError, GetWinProbabilityResponse, GetPregameWinProbabilitiesData, GetPregameWinProbabilitiesError, GetPregameWinProbabilitiesResponse, GetFieldGoalExpectedPointsError, GetFieldGoalExpectedPointsResponse, GetLivePlaysData, GetLivePlaysError, GetLivePlaysResponse, GetLinesData, GetLinesError, GetLinesResponse, GetGamesData, GetGamesError, GetGamesResponse, GetGameTeamStatsData, GetGameTeamStatsError, GetGameTeamStatsResponse, GetGamePlayerStatsData, GetGamePlayerStatsError, GetGamePlayerStatsResponse, GetMediaData, GetMediaError, GetMediaResponse, GetWeatherData, GetWeatherError, GetWeatherResponse, GetRecordsData, GetRecordsError, GetRecordsResponse, GetCalendarData, GetCalendarError, GetCalendarResponse, GetScoreboardData, GetScoreboardError, GetScoreboardResponse, GetDrivesData, GetDrivesError, GetDrivesResponse, GetDraftTeamsError, GetDraftTeamsResponse, GetDraftPositionsError, GetDraftPositionsResponse, GetDraftPicksData, GetDraftPicksError, GetDraftPicksResponse, GetCoachesData, GetCoachesError, GetCoachesResponse, GetAdvancedBoxScoreData, GetAdvancedBoxScoreError, GetAdvancedBoxScoreResponse } from './types.gen';

export const client = createClient(createConfig({ baseUrl: 'https://apinext.collegefootballdata.com' }));

/**
 * Retrieves team information
 */
export const getTeams = <ThrowOnError extends boolean = false>(options?: Options<GetTeamsData, ThrowOnError>) => { return (options?.client ?? client).get<GetTeamsResponse, GetTeamsError, ThrowOnError>({
    ...options,
    url: '/teams'
}); };

/**
 * Retrieves information on teams playing in the highest division of CFB
 */
export const getFbsTeams = <ThrowOnError extends boolean = false>(options?: Options<GetFbsTeamsData, ThrowOnError>) => { return (options?.client ?? client).get<GetFbsTeamsResponse, GetFbsTeamsError, ThrowOnError>({
    ...options,
    url: '/teams/fbs'
}); };

/**
 * Retrieves historical matchup details for two given teams
 */
export const getMatchup = <ThrowOnError extends boolean = false>(options: Options<GetMatchupData, ThrowOnError>) => { return (options?.client ?? client).get<GetMatchupResponse, GetMatchupError, ThrowOnError>({
    ...options,
    url: '/teams/matchup'
}); };

/**
 * Retrieves historical roster data
 */
export const getRoster = <ThrowOnError extends boolean = false>(options?: Options<GetRosterData, ThrowOnError>) => { return (options?.client ?? client).get<GetRosterResponse, GetRosterError, ThrowOnError>({
    ...options,
    url: '/roster'
}); };

/**
 * Retrieves list of conferences
 */
export const getConferences = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetConferencesResponse, GetConferencesError, ThrowOnError>({
    ...options,
    url: '/conferences'
}); };

/**
 * Retrieve 247 Team Talent Composite for a given year
 */
export const getTalent = <ThrowOnError extends boolean = false>(options: Options<GetTalentData, ThrowOnError>) => { return (options?.client ?? client).get<GetTalentResponse, GetTalentError, ThrowOnError>({
    ...options,
    url: '/talent'
}); };

/**
 * Retrieve list of venues
 */
export const getVenues = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetVenuesResponse, GetVenuesError, ThrowOnError>({
    ...options,
    url: '/venues'
}); };

/**
 * Retrieves aggregated player statistics for a given season
 */
export const getPlayerSeasonStats = <ThrowOnError extends boolean = false>(options: Options<GetPlayerSeasonStatsData, ThrowOnError>) => { return (options?.client ?? client).get<GetPlayerSeasonStatsResponse, GetPlayerSeasonStatsError, ThrowOnError>({
    ...options,
    url: '/stats/player/season'
}); };

/**
 * Retrieves aggregated team season statistics
 */
export const getTeamStats = <ThrowOnError extends boolean = false>(options?: Options<GetTeamStatsData, ThrowOnError>) => { return (options?.client ?? client).get<GetTeamStatsResponse, GetTeamStatsError, ThrowOnError>({
    ...options,
    url: '/stats/season'
}); };

/**
 * Gets team statistical categories
 */
export const getCategories = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetCategoriesResponse, GetCategoriesError, ThrowOnError>({
    ...options,
    url: '/stats/categories'
}); };

/**
 * Retrieves advanced season statistics for teams
 */
export const getAdvancedSeasonStats = <ThrowOnError extends boolean = false>(options?: Options<GetAdvancedSeasonStatsData, ThrowOnError>) => { return (options?.client ?? client).get<GetAdvancedSeasonStatsResponse, GetAdvancedSeasonStatsError, ThrowOnError>({
    ...options,
    url: '/stats/season/advanced'
}); };

/**
 * Retrieves advanced statistics aggregated by game
 */
export const getAdvancedGameStats = <ThrowOnError extends boolean = false>(options?: Options<GetAdvancedGameStatsData, ThrowOnError>) => { return (options?.client ?? client).get<GetAdvancedGameStatsResponse, GetAdvancedGameStatsError, ThrowOnError>({
    ...options,
    url: '/stats/game/advanced'
}); };

/**
 * Retrieve opponent-adjusted team season statistics
 */
export const getAdjustedTeamSeasonStats = <ThrowOnError extends boolean = false>(options?: Options<GetAdjustedTeamSeasonStatsData, ThrowOnError>) => { return (options?.client ?? client).get<GetAdjustedTeamSeasonStatsResponse, GetAdjustedTeamSeasonStatsError, ThrowOnError>({
    ...options,
    url: '/stats/team/season/adjusted'
}); };

/**
 * Retrieves player recruiting rankings
 */
export const getRecruits = <ThrowOnError extends boolean = false>(options?: Options<GetRecruitsData, ThrowOnError>) => { return (options?.client ?? client).get<GetRecruitsResponse, GetRecruitsError, ThrowOnError>({
    ...options,
    url: '/recruiting/players'
}); };

/**
 * Retrieves team recruiting rankings
 */
export const getTeamRecruitingRankings = <ThrowOnError extends boolean = false>(options?: Options<GetTeamRecruitingRankingsData, ThrowOnError>) => { return (options?.client ?? client).get<GetTeamRecruitingRankingsResponse, GetTeamRecruitingRankingsError, ThrowOnError>({
    ...options,
    url: '/recruiting/teams'
}); };

/**
 * Retrieves aggregated recruiting statistics by team and position grouping
 */
export const getAggregatedTeamRecruitingRatings = <ThrowOnError extends boolean = false>(options?: Options<GetAggregatedTeamRecruitingRatingsData, ThrowOnError>) => { return (options?.client ?? client).get<GetAggregatedTeamRecruitingRatingsResponse, GetAggregatedTeamRecruitingRatingsError, ThrowOnError>({
    ...options,
    url: '/recruiting/groups'
}); };

/**
 * Retrieves SP+ ratings for a given year or school
 */
export const getSp = <ThrowOnError extends boolean = false>(options?: Options<GetSpData, ThrowOnError>) => { return (options?.client ?? client).get<GetSpResponse, GetSpError, ThrowOnError>({
    ...options,
    url: '/ratings/sp'
}); };

/**
 * Retrieves aggregated historical conference SP+ data
 */
export const getConferenceSp = <ThrowOnError extends boolean = false>(options?: Options<GetConferenceSpData, ThrowOnError>) => { return (options?.client ?? client).get<GetConferenceSpResponse, GetConferenceSpError, ThrowOnError>({
    ...options,
    url: '/ratings/sp/conferences'
}); };

/**
 * Retrieves historical SRS for a year or team
 */
export const getSrs = <ThrowOnError extends boolean = false>(options?: Options<GetSrsData, ThrowOnError>) => { return (options?.client ?? client).get<GetSrsResponse, GetSrsError, ThrowOnError>({
    ...options,
    url: '/ratings/srs'
}); };

/**
 * Retrieves historical Elo ratings
 */
export const getElo = <ThrowOnError extends boolean = false>(options?: Options<GetEloData, ThrowOnError>) => { return (options?.client ?? client).get<GetEloResponse, GetEloError, ThrowOnError>({
    ...options,
    url: '/ratings/elo'
}); };

/**
 * Retrieves historical Football Power Index (FPI) ratings
 */
export const getFpi = <ThrowOnError extends boolean = false>(options?: Options<GetFpiData, ThrowOnError>) => { return (options?.client ?? client).get<GetFpiResponse, GetFpiError, ThrowOnError>({
    ...options,
    url: '/ratings/fpi'
}); };

/**
 * Retrieves historical poll data
 */
export const getRankings = <ThrowOnError extends boolean = false>(options: Options<GetRankingsData, ThrowOnError>) => { return (options?.client ?? client).get<GetRankingsResponse, GetRankingsError, ThrowOnError>({
    ...options,
    url: '/rankings'
}); };

/**
 * Retrieves historical play data
 */
export const getPlays = <ThrowOnError extends boolean = false>(options: Options<GetPlaysData, ThrowOnError>) => { return (options?.client ?? client).get<GetPlaysResponse, GetPlaysError, ThrowOnError>({
    ...options,
    url: '/plays'
}); };

/**
 * Retrieves available play types
 */
export const getPlayTypes = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetPlayTypesResponse, GetPlayTypesError, ThrowOnError>({
    ...options,
    url: '/plays/types'
}); };

/**
 * Retrieve player-play associations (limit 2000)
 */
export const getPlayStats = <ThrowOnError extends boolean = false>(options?: Options<GetPlayStatsData, ThrowOnError>) => { return (options?.client ?? client).get<GetPlayStatsResponse, GetPlayStatsError, ThrowOnError>({
    ...options,
    url: '/plays/stats'
}); };

/**
 * Retrieves available play stat types
 */
export const getPlayStatTypes = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetPlayStatTypesResponse, GetPlayStatTypesError, ThrowOnError>({
    ...options,
    url: '/plays/stats/types'
}); };

/**
 * Search for players (lists top 100 results)
 */
export const searchPlayers = <ThrowOnError extends boolean = false>(options: Options<SearchPlayersData, ThrowOnError>) => { return (options?.client ?? client).get<SearchPlayersResponse, SearchPlayersError, ThrowOnError>({
    ...options,
    url: '/player/search'
}); };

/**
 * Retrieves player usage data for a given season
 */
export const getPlayerUsage = <ThrowOnError extends boolean = false>(options: Options<GetPlayerUsageData, ThrowOnError>) => { return (options?.client ?? client).get<GetPlayerUsageResponse, GetPlayerUsageError, ThrowOnError>({
    ...options,
    url: '/player/usage'
}); };

/**
 * Retrieves returning production data. Either a year or team filter must be specified.
 */
export const getReturningProduction = <ThrowOnError extends boolean = false>(options?: Options<GetReturningProductionData, ThrowOnError>) => { return (options?.client ?? client).get<GetReturningProductionResponse, GetReturningProductionError, ThrowOnError>({
    ...options,
    url: '/player/returning'
}); };

/**
 * Retrieves transfer portal data for a given year
 */
export const getTransferPortal = <ThrowOnError extends boolean = false>(options: Options<GetTransferPortalData, ThrowOnError>) => { return (options?.client ?? client).get<GetTransferPortalResponse, GetTransferPortalError, ThrowOnError>({
    ...options,
    url: '/player/portal'
}); };

/**
 * Query Predicted Points values by down and distance
 */
export const getPredictedPoints = <ThrowOnError extends boolean = false>(options: Options<GetPredictedPointsData, ThrowOnError>) => { return (options?.client ?? client).get<GetPredictedPointsResponse, GetPredictedPointsError, ThrowOnError>({
    ...options,
    url: '/ppa/predicted'
}); };

/**
 * Retrieves historical team PPA metrics by season
 */
export const getPredictedPointsAddedByTeam = <ThrowOnError extends boolean = false>(options?: Options<GetPredictedPointsAddedByTeamData, ThrowOnError>) => { return (options?.client ?? client).get<GetPredictedPointsAddedByTeamResponse, GetPredictedPointsAddedByTeamError, ThrowOnError>({
    ...options,
    url: '/ppa/teams'
}); };

/**
 * Retrieves historical team PPA metrics by game
 */
export const getPredictedPointsAddedByGame = <ThrowOnError extends boolean = false>(options: Options<GetPredictedPointsAddedByGameData, ThrowOnError>) => { return (options?.client ?? client).get<GetPredictedPointsAddedByGameResponse, GetPredictedPointsAddedByGameError, ThrowOnError>({
    ...options,
    url: '/ppa/games'
}); };

/**
 * Queries player PPA statistics by game
 */
export const getPredictedPointsAddedByPlayerGame = <ThrowOnError extends boolean = false>(options: Options<GetPredictedPointsAddedByPlayerGameData, ThrowOnError>) => { return (options?.client ?? client).get<GetPredictedPointsAddedByPlayerGameResponse, GetPredictedPointsAddedByPlayerGameError, ThrowOnError>({
    ...options,
    url: '/ppa/players/games'
}); };

/**
 * Queries player PPA statistics by season
 */
export const getPredictedPointsAddedByPlayerSeason = <ThrowOnError extends boolean = false>(options?: Options<GetPredictedPointsAddedByPlayerSeasonData, ThrowOnError>) => { return (options?.client ?? client).get<GetPredictedPointsAddedByPlayerSeasonResponse, GetPredictedPointsAddedByPlayerSeasonError, ThrowOnError>({
    ...options,
    url: '/ppa/players/season'
}); };

/**
 * Query play win probabilities by game
 */
export const getWinProbability = <ThrowOnError extends boolean = false>(options: Options<GetWinProbabilityData, ThrowOnError>) => { return (options?.client ?? client).get<GetWinProbabilityResponse, GetWinProbabilityError, ThrowOnError>({
    ...options,
    url: '/metrics/wp'
}); };

/**
 * Queries pregame win probabilities
 */
export const getPregameWinProbabilities = <ThrowOnError extends boolean = false>(options?: Options<GetPregameWinProbabilitiesData, ThrowOnError>) => { return (options?.client ?? client).get<GetPregameWinProbabilitiesResponse, GetPregameWinProbabilitiesError, ThrowOnError>({
    ...options,
    url: '/metrics/wp/pregame'
}); };

/**
 * Queries field goal expected points values
 */
export const getFieldGoalExpectedPoints = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetFieldGoalExpectedPointsResponse, GetFieldGoalExpectedPointsError, ThrowOnError>({
    ...options,
    url: '/metrics/fg/ep'
}); };

/**
 * Queries live play-by-play data and advanced stats
 */
export const getLivePlays = <ThrowOnError extends boolean = false>(options: Options<GetLivePlaysData, ThrowOnError>) => { return (options?.client ?? client).get<GetLivePlaysResponse, GetLivePlaysError, ThrowOnError>({
    ...options,
    url: '/live/plays'
}); };

/**
 * Retrieves historical betting data
 */
export const getLines = <ThrowOnError extends boolean = false>(options?: Options<GetLinesData, ThrowOnError>) => { return (options?.client ?? client).get<GetLinesResponse, GetLinesError, ThrowOnError>({
    ...options,
    url: '/lines'
}); };

/**
 * Retrieves historical game data
 */
export const getGames = <ThrowOnError extends boolean = false>(options?: Options<GetGamesData, ThrowOnError>) => { return (options?.client ?? client).get<GetGamesResponse, GetGamesError, ThrowOnError>({
    ...options,
    url: '/games'
}); };

/**
 * Retrieves team box score statistics
 */
export const getGameTeamStats = <ThrowOnError extends boolean = false>(options?: Options<GetGameTeamStatsData, ThrowOnError>) => { return (options?.client ?? client).get<GetGameTeamStatsResponse, GetGameTeamStatsError, ThrowOnError>({
    ...options,
    url: '/games/teams'
}); };

/**
 * Retrieves player box score statistics
 */
export const getGamePlayerStats = <ThrowOnError extends boolean = false>(options?: Options<GetGamePlayerStatsData, ThrowOnError>) => { return (options?.client ?? client).get<GetGamePlayerStatsResponse, GetGamePlayerStatsError, ThrowOnError>({
    ...options,
    url: '/games/players'
}); };

/**
 * Retrieves media information for games
 */
export const getMedia = <ThrowOnError extends boolean = false>(options: Options<GetMediaData, ThrowOnError>) => { return (options?.client ?? client).get<GetMediaResponse, GetMediaError, ThrowOnError>({
    ...options,
    url: '/games/media'
}); };

/**
 * Retrieve historical and future weather data (Patreon only)
 */
export const getWeather = <ThrowOnError extends boolean = false>(options?: Options<GetWeatherData, ThrowOnError>) => { return (options?.client ?? client).get<GetWeatherResponse, GetWeatherError, ThrowOnError>({
    ...options,
    url: '/games/weather'
}); };

/**
 * Retrieves historical team records
 */
export const getRecords = <ThrowOnError extends boolean = false>(options?: Options<GetRecordsData, ThrowOnError>) => { return (options?.client ?? client).get<GetRecordsResponse, GetRecordsError, ThrowOnError>({
    ...options,
    url: '/records'
}); };

/**
 * Retrieves calendar information
 */
export const getCalendar = <ThrowOnError extends boolean = false>(options: Options<GetCalendarData, ThrowOnError>) => { return (options?.client ?? client).get<GetCalendarResponse, GetCalendarError, ThrowOnError>({
    ...options,
    url: '/calendar'
}); };

/**
 * Retrieves live scoreboard data
 */
export const getScoreboard = <ThrowOnError extends boolean = false>(options?: Options<GetScoreboardData, ThrowOnError>) => { return (options?.client ?? client).get<GetScoreboardResponse, GetScoreboardError, ThrowOnError>({
    ...options,
    url: '/scoreboard'
}); };

/**
 * Retrieves historical drive data
 */
export const getDrives = <ThrowOnError extends boolean = false>(options: Options<GetDrivesData, ThrowOnError>) => { return (options?.client ?? client).get<GetDrivesResponse, GetDrivesError, ThrowOnError>({
    ...options,
    url: '/drives'
}); };

/**
 * Retrieves list of NFL teams
 */
export const getDraftTeams = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetDraftTeamsResponse, GetDraftTeamsError, ThrowOnError>({
    ...options,
    url: '/draft/teams'
}); };

/**
 * Retrieves list of player position categories for the NFL Draft
 */
export const getDraftPositions = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetDraftPositionsResponse, GetDraftPositionsError, ThrowOnError>({
    ...options,
    url: '/draft/positions'
}); };

/**
 * Retrieve historical NFL draft data
 */
export const getDraftPicks = <ThrowOnError extends boolean = false>(options?: Options<GetDraftPicksData, ThrowOnError>) => { return (options?.client ?? client).get<GetDraftPicksResponse, GetDraftPicksError, ThrowOnError>({
    ...options,
    url: '/draft/picks'
}); };

/**
 * Retrieves historical head coach information and records
 */
export const getCoaches = <ThrowOnError extends boolean = false>(options?: Options<GetCoachesData, ThrowOnError>) => { return (options?.client ?? client).get<GetCoachesResponse, GetCoachesError, ThrowOnError>({
    ...options,
    url: '/coaches'
}); };

/**
 * Retrieves an advanced box score for a game
 */
export const getAdvancedBoxScore = <ThrowOnError extends boolean = false>(options: Options<GetAdvancedBoxScoreData, ThrowOnError>) => { return (options?.client ?? client).get<GetAdvancedBoxScoreResponse, GetAdvancedBoxScoreError, ThrowOnError>({
    ...options,
    url: '/game/box/advanced'
}); };