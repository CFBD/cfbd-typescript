// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetAdjustedTeamSeasonStatsData, GetAdjustedTeamSeasonStatsResponse, GetAdjustedPlayerPassingStatsData, GetAdjustedPlayerPassingStatsResponse, GetAdjustedPlayerRushingStatsData, GetAdjustedPlayerRushingStatsResponse, GetKickerPaarData, GetKickerPaarResponse, GetTeamsData, GetTeamsResponse, GetFbsTeamsData, GetFbsTeamsResponse, GetMatchupData, GetMatchupResponse, GetRosterData, GetRosterResponse, GetConferencesData, GetConferencesResponse, GetTalentData, GetTalentResponse, GetVenuesData, GetVenuesResponse, GetPlayerSeasonStatsData, GetPlayerSeasonStatsResponse, GetTeamStatsData, GetTeamStatsResponse, GetCategoriesData, GetCategoriesResponse, GetAdvancedSeasonStatsData, GetAdvancedSeasonStatsResponse, GetAdvancedGameStatsData, GetAdvancedGameStatsResponse, GetRecruitsData, GetRecruitsResponse, GetTeamRecruitingRankingsData, GetTeamRecruitingRankingsResponse, GetAggregatedTeamRecruitingRatingsData, GetAggregatedTeamRecruitingRatingsResponse, GetSpData, GetSpResponse, GetConferenceSpData, GetConferenceSpResponse, GetSrsData, GetSrsResponse, GetEloData, GetEloResponse, GetFpiData, GetFpiResponse, GetRankingsData, GetRankingsResponse, GetPlaysData, GetPlaysResponse, GetPlayTypesData, GetPlayTypesResponse, GetPlayStatsData, GetPlayStatsResponse, GetPlayStatTypesData, GetPlayStatTypesResponse, SearchPlayersData, SearchPlayersResponse, GetPlayerUsageData, GetPlayerUsageResponse, GetReturningProductionData, GetReturningProductionResponse, GetTransferPortalData, GetTransferPortalResponse, GetPredictedPointsData, GetPredictedPointsResponse, GetPredictedPointsAddedByTeamData, GetPredictedPointsAddedByTeamResponse, GetPredictedPointsAddedByGameData, GetPredictedPointsAddedByGameResponse, GetPredictedPointsAddedByPlayerGameData, GetPredictedPointsAddedByPlayerGameResponse, GetPredictedPointsAddedByPlayerSeasonData, GetPredictedPointsAddedByPlayerSeasonResponse, GetWinProbabilityData, GetWinProbabilityResponse, GetPregameWinProbabilitiesData, GetPregameWinProbabilitiesResponse, GetFieldGoalExpectedPointsData, GetFieldGoalExpectedPointsResponse, GetLivePlaysData, GetLivePlaysResponse, GetLinesData, GetLinesResponse, GetGamesData, GetGamesResponse, GetGameTeamStatsData, GetGameTeamStatsResponse, GetGamePlayerStatsData, GetGamePlayerStatsResponse, GetMediaData, GetMediaResponse, GetWeatherData, GetWeatherResponse, GetRecordsData, GetRecordsResponse, GetCalendarData, GetCalendarResponse, GetScoreboardData, GetScoreboardResponse, GetDrivesData, GetDrivesResponse, GetDraftTeamsData, GetDraftTeamsResponse, GetDraftPositionsData, GetDraftPositionsResponse, GetDraftPicksData, GetDraftPicksResponse, GetCoachesData, GetCoachesResponse, GetAdvancedBoxScoreData, GetAdvancedBoxScoreResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

/**
 * Retrieve opponent-adjusted team season statistics
 */
export const getAdjustedTeamSeasonStats = <ThrowOnError extends boolean = false>(options?: Options<GetAdjustedTeamSeasonStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAdjustedTeamSeasonStatsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/wepa/team/season',
        ...options
    });
};

/**
 * Retrieve opponent-adjusted player passing statistics
 */
export const getAdjustedPlayerPassingStats = <ThrowOnError extends boolean = false>(options?: Options<GetAdjustedPlayerPassingStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAdjustedPlayerPassingStatsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/wepa/players/passing',
        ...options
    });
};

/**
 * Retrieve opponent-adjusted player rushing statistics
 */
export const getAdjustedPlayerRushingStats = <ThrowOnError extends boolean = false>(options?: Options<GetAdjustedPlayerRushingStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAdjustedPlayerRushingStatsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/wepa/players/rushing',
        ...options
    });
};

/**
 * Retrieve Points Added Above Replacement (PAAR) ratings for kickers
 */
export const getKickerPaar = <ThrowOnError extends boolean = false>(options?: Options<GetKickerPaarData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetKickerPaarResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/wepa/players/kicking',
        ...options
    });
};

/**
 * Retrieves team information
 */
export const getTeams = <ThrowOnError extends boolean = false>(options?: Options<GetTeamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTeamsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams',
        ...options
    });
};

/**
 * Retrieves information on teams playing in the highest division of CFB
 */
export const getFbsTeams = <ThrowOnError extends boolean = false>(options?: Options<GetFbsTeamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFbsTeamsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/fbs',
        ...options
    });
};

/**
 * Retrieves historical matchup details for two given teams
 */
export const getMatchup = <ThrowOnError extends boolean = false>(options: Options<GetMatchupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMatchupResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/matchup',
        ...options
    });
};

/**
 * Retrieves historical roster data
 */
export const getRoster = <ThrowOnError extends boolean = false>(options?: Options<GetRosterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRosterResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/roster',
        ...options
    });
};

/**
 * Retrieves list of conferences
 */
export const getConferences = <ThrowOnError extends boolean = false>(options?: Options<GetConferencesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConferencesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conferences',
        ...options
    });
};

/**
 * Retrieve 247 Team Talent Composite for a given year
 */
export const getTalent = <ThrowOnError extends boolean = false>(options: Options<GetTalentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTalentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/talent',
        ...options
    });
};

/**
 * Retrieve list of venues
 */
export const getVenues = <ThrowOnError extends boolean = false>(options?: Options<GetVenuesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVenuesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/venues',
        ...options
    });
};

/**
 * Retrieves aggregated player statistics for a given season
 */
export const getPlayerSeasonStats = <ThrowOnError extends boolean = false>(options: Options<GetPlayerSeasonStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlayerSeasonStatsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/stats/player/season',
        ...options
    });
};

/**
 * Retrieves aggregated team season statistics
 */
export const getTeamStats = <ThrowOnError extends boolean = false>(options?: Options<GetTeamStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTeamStatsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/stats/season',
        ...options
    });
};

/**
 * Gets team statistical categories
 */
export const getCategories = <ThrowOnError extends boolean = false>(options?: Options<GetCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCategoriesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/stats/categories',
        ...options
    });
};

/**
 * Retrieves advanced season statistics for teams
 */
export const getAdvancedSeasonStats = <ThrowOnError extends boolean = false>(options?: Options<GetAdvancedSeasonStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAdvancedSeasonStatsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/stats/season/advanced',
        ...options
    });
};

/**
 * Retrieves advanced statistics aggregated by game
 */
export const getAdvancedGameStats = <ThrowOnError extends boolean = false>(options?: Options<GetAdvancedGameStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAdvancedGameStatsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/stats/game/advanced',
        ...options
    });
};

/**
 * Retrieves player recruiting rankings
 */
export const getRecruits = <ThrowOnError extends boolean = false>(options?: Options<GetRecruitsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecruitsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recruiting/players',
        ...options
    });
};

/**
 * Retrieves team recruiting rankings
 */
export const getTeamRecruitingRankings = <ThrowOnError extends boolean = false>(options?: Options<GetTeamRecruitingRankingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTeamRecruitingRankingsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recruiting/teams',
        ...options
    });
};

/**
 * Retrieves aggregated recruiting statistics by team and position grouping
 */
export const getAggregatedTeamRecruitingRatings = <ThrowOnError extends boolean = false>(options?: Options<GetAggregatedTeamRecruitingRatingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAggregatedTeamRecruitingRatingsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recruiting/groups',
        ...options
    });
};

/**
 * Retrieves SP+ ratings for a given year or school
 */
export const getSp = <ThrowOnError extends boolean = false>(options?: Options<GetSpData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSpResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/ratings/sp',
        ...options
    });
};

/**
 * Retrieves aggregated historical conference SP+ data
 */
export const getConferenceSp = <ThrowOnError extends boolean = false>(options?: Options<GetConferenceSpData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConferenceSpResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/ratings/sp/conferences',
        ...options
    });
};

/**
 * Retrieves historical SRS for a year or team
 */
export const getSrs = <ThrowOnError extends boolean = false>(options?: Options<GetSrsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSrsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/ratings/srs',
        ...options
    });
};

/**
 * Retrieves historical Elo ratings
 */
export const getElo = <ThrowOnError extends boolean = false>(options?: Options<GetEloData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetEloResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/ratings/elo',
        ...options
    });
};

/**
 * Retrieves historical Football Power Index (FPI) ratings
 */
export const getFpi = <ThrowOnError extends boolean = false>(options?: Options<GetFpiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFpiResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/ratings/fpi',
        ...options
    });
};

/**
 * Retrieves historical poll data
 */
export const getRankings = <ThrowOnError extends boolean = false>(options: Options<GetRankingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRankingsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rankings',
        ...options
    });
};

/**
 * Retrieves historical play data
 */
export const getPlays = <ThrowOnError extends boolean = false>(options: Options<GetPlaysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlaysResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plays',
        ...options
    });
};

/**
 * Retrieves available play types
 */
export const getPlayTypes = <ThrowOnError extends boolean = false>(options?: Options<GetPlayTypesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPlayTypesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plays/types',
        ...options
    });
};

/**
 * Retrieve player-play associations (limit 2000)
 */
export const getPlayStats = <ThrowOnError extends boolean = false>(options?: Options<GetPlayStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPlayStatsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plays/stats',
        ...options
    });
};

/**
 * Retrieves available play stat types
 */
export const getPlayStatTypes = <ThrowOnError extends boolean = false>(options?: Options<GetPlayStatTypesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPlayStatTypesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/plays/stats/types',
        ...options
    });
};

/**
 * Search for players (lists top 100 results)
 */
export const searchPlayers = <ThrowOnError extends boolean = false>(options: Options<SearchPlayersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchPlayersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/player/search',
        ...options
    });
};

/**
 * Retrieves player usage data for a given season
 */
export const getPlayerUsage = <ThrowOnError extends boolean = false>(options: Options<GetPlayerUsageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlayerUsageResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/player/usage',
        ...options
    });
};

/**
 * Retrieves returning production data. Either a year or team filter must be specified.
 */
export const getReturningProduction = <ThrowOnError extends boolean = false>(options?: Options<GetReturningProductionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetReturningProductionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/player/returning',
        ...options
    });
};

/**
 * Retrieves transfer portal data for a given year
 */
export const getTransferPortal = <ThrowOnError extends boolean = false>(options: Options<GetTransferPortalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTransferPortalResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/player/portal',
        ...options
    });
};

/**
 * Query Predicted Points values by down and distance
 */
export const getPredictedPoints = <ThrowOnError extends boolean = false>(options: Options<GetPredictedPointsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPredictedPointsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/ppa/predicted',
        ...options
    });
};

/**
 * Retrieves historical team PPA metrics by season
 */
export const getPredictedPointsAddedByTeam = <ThrowOnError extends boolean = false>(options?: Options<GetPredictedPointsAddedByTeamData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPredictedPointsAddedByTeamResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/ppa/teams',
        ...options
    });
};

/**
 * Retrieves historical team PPA metrics by game
 */
export const getPredictedPointsAddedByGame = <ThrowOnError extends boolean = false>(options: Options<GetPredictedPointsAddedByGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPredictedPointsAddedByGameResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/ppa/games',
        ...options
    });
};

/**
 * Queries player PPA statistics by game
 */
export const getPredictedPointsAddedByPlayerGame = <ThrowOnError extends boolean = false>(options: Options<GetPredictedPointsAddedByPlayerGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPredictedPointsAddedByPlayerGameResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/ppa/players/games',
        ...options
    });
};

/**
 * Queries player PPA statistics by season
 */
export const getPredictedPointsAddedByPlayerSeason = <ThrowOnError extends boolean = false>(options?: Options<GetPredictedPointsAddedByPlayerSeasonData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPredictedPointsAddedByPlayerSeasonResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/ppa/players/season',
        ...options
    });
};

/**
 * Query play win probabilities by game
 */
export const getWinProbability = <ThrowOnError extends boolean = false>(options: Options<GetWinProbabilityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWinProbabilityResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metrics/wp',
        ...options
    });
};

/**
 * Queries pregame win probabilities
 */
export const getPregameWinProbabilities = <ThrowOnError extends boolean = false>(options?: Options<GetPregameWinProbabilitiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPregameWinProbabilitiesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metrics/wp/pregame',
        ...options
    });
};

/**
 * Queries field goal expected points values
 */
export const getFieldGoalExpectedPoints = <ThrowOnError extends boolean = false>(options?: Options<GetFieldGoalExpectedPointsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFieldGoalExpectedPointsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metrics/fg/ep',
        ...options
    });
};

/**
 * Queries live play-by-play data and advanced stats
 */
export const getLivePlays = <ThrowOnError extends boolean = false>(options: Options<GetLivePlaysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLivePlaysResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/live/plays',
        ...options
    });
};

/**
 * Retrieves historical betting data
 */
export const getLines = <ThrowOnError extends boolean = false>(options?: Options<GetLinesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLinesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lines',
        ...options
    });
};

/**
 * Retrieves historical game data
 */
export const getGames = <ThrowOnError extends boolean = false>(options?: Options<GetGamesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGamesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/games',
        ...options
    });
};

/**
 * Retrieves team box score statistics
 */
export const getGameTeamStats = <ThrowOnError extends boolean = false>(options?: Options<GetGameTeamStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGameTeamStatsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/games/teams',
        ...options
    });
};

/**
 * Retrieves player box score statistics
 */
export const getGamePlayerStats = <ThrowOnError extends boolean = false>(options?: Options<GetGamePlayerStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGamePlayerStatsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/games/players',
        ...options
    });
};

/**
 * Retrieves media information for games
 */
export const getMedia = <ThrowOnError extends boolean = false>(options: Options<GetMediaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMediaResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/games/media',
        ...options
    });
};

/**
 * Retrieve historical and future weather data (Patreon only)
 */
export const getWeather = <ThrowOnError extends boolean = false>(options?: Options<GetWeatherData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWeatherResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/games/weather',
        ...options
    });
};

/**
 * Retrieves historical team records
 */
export const getRecords = <ThrowOnError extends boolean = false>(options?: Options<GetRecordsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecordsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/records',
        ...options
    });
};

/**
 * Retrieves calendar information
 */
export const getCalendar = <ThrowOnError extends boolean = false>(options: Options<GetCalendarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCalendarResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendar',
        ...options
    });
};

/**
 * Retrieves live scoreboard data
 */
export const getScoreboard = <ThrowOnError extends boolean = false>(options?: Options<GetScoreboardData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetScoreboardResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/scoreboard',
        ...options
    });
};

/**
 * Retrieves historical drive data
 */
export const getDrives = <ThrowOnError extends boolean = false>(options: Options<GetDrivesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDrivesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/drives',
        ...options
    });
};

/**
 * Retrieves list of NFL teams
 */
export const getDraftTeams = <ThrowOnError extends boolean = false>(options?: Options<GetDraftTeamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDraftTeamsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/draft/teams',
        ...options
    });
};

/**
 * Retrieves list of player position categories for the NFL Draft
 */
export const getDraftPositions = <ThrowOnError extends boolean = false>(options?: Options<GetDraftPositionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDraftPositionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/draft/positions',
        ...options
    });
};

/**
 * Retrieve historical NFL draft data
 */
export const getDraftPicks = <ThrowOnError extends boolean = false>(options?: Options<GetDraftPicksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDraftPicksResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/draft/picks',
        ...options
    });
};

/**
 * Retrieves historical head coach information and records
 */
export const getCoaches = <ThrowOnError extends boolean = false>(options?: Options<GetCoachesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCoachesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/coaches',
        ...options
    });
};

/**
 * Retrieves an advanced box score for a game
 */
export const getAdvancedBoxScore = <ThrowOnError extends boolean = false>(options: Options<GetAdvancedBoxScoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAdvancedBoxScoreResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/game/box/advanced',
        ...options
    });
};